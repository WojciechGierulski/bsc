// Generated by gencpp from file ray_trace/Triangle.msg
// DO NOT EDIT!


#ifndef RAY_TRACE_MESSAGE_TRIANGLE_H
#define RAY_TRACE_MESSAGE_TRIANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ray_trace
{
template <class ContainerAllocator>
struct Triangle_
{
  typedef Triangle_<ContainerAllocator> Type;

  Triangle_()
    : p1()
    , p2()
    , p3()  {
    }
  Triangle_(const ContainerAllocator& _alloc)
    : p1(_alloc)
    , p2(_alloc)
    , p3(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p1_type;
  _p1_type p1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p2_type;
  _p2_type p2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p3_type;
  _p3_type p3;





  typedef boost::shared_ptr< ::ray_trace::Triangle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ray_trace::Triangle_<ContainerAllocator> const> ConstPtr;

}; // struct Triangle_

typedef ::ray_trace::Triangle_<std::allocator<void> > Triangle;

typedef boost::shared_ptr< ::ray_trace::Triangle > TrianglePtr;
typedef boost::shared_ptr< ::ray_trace::Triangle const> TriangleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ray_trace::Triangle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ray_trace::Triangle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ray_trace::Triangle_<ContainerAllocator1> & lhs, const ::ray_trace::Triangle_<ContainerAllocator2> & rhs)
{
  return lhs.p1 == rhs.p1 &&
    lhs.p2 == rhs.p2 &&
    lhs.p3 == rhs.p3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ray_trace::Triangle_<ContainerAllocator1> & lhs, const ::ray_trace::Triangle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ray_trace

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::Triangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::Triangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::Triangle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::Triangle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::Triangle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::Triangle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ray_trace::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "480a47a04a0e0681cafbb5fbe734f2d4";
  }

  static const char* value(const ::ray_trace::Triangle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x480a47a04a0e0681ULL;
  static const uint64_t static_value2 = 0xcafbb5fbe734f2d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ray_trace::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ray_trace/Triangle";
  }

  static const char* value(const ::ray_trace::Triangle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ray_trace::Triangle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point p1\n"
"geometry_msgs/Point p2\n"
"geometry_msgs/Point p3\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ray_trace::Triangle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ray_trace::Triangle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p1);
      stream.next(m.p2);
      stream.next(m.p3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Triangle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ray_trace::Triangle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ray_trace::Triangle_<ContainerAllocator>& v)
  {
    s << indent << "p1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p1);
    s << indent << "p2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p2);
    s << indent << "p3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAY_TRACE_MESSAGE_TRIANGLE_H
