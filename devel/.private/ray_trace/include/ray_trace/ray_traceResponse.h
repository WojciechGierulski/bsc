// Generated by gencpp from file ray_trace/ray_traceResponse.msg
// DO NOT EDIT!


#ifndef RAY_TRACE_MESSAGE_RAY_TRACERESPONSE_H
#define RAY_TRACE_MESSAGE_RAY_TRACERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ray_trace
{
template <class ContainerAllocator>
struct ray_traceResponse_
{
  typedef ray_traceResponse_<ContainerAllocator> Type;

  ray_traceResponse_()
    : intersections()  {
    }
  ray_traceResponse_(const ContainerAllocator& _alloc)
    : intersections(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _intersections_type;
  _intersections_type intersections;





  typedef boost::shared_ptr< ::ray_trace::ray_traceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ray_trace::ray_traceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ray_traceResponse_

typedef ::ray_trace::ray_traceResponse_<std::allocator<void> > ray_traceResponse;

typedef boost::shared_ptr< ::ray_trace::ray_traceResponse > ray_traceResponsePtr;
typedef boost::shared_ptr< ::ray_trace::ray_traceResponse const> ray_traceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ray_trace::ray_traceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ray_trace::ray_traceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ray_trace::ray_traceResponse_<ContainerAllocator1> & lhs, const ::ray_trace::ray_traceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.intersections == rhs.intersections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ray_trace::ray_traceResponse_<ContainerAllocator1> & lhs, const ::ray_trace::ray_traceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ray_trace

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::ray_traceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::ray_traceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::ray_traceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df28a08516f5405586d6e6e2f427f310";
  }

  static const char* value(const ::ray_trace::ray_traceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf28a08516f54055ULL;
  static const uint64_t static_value2 = 0x86d6e6e2f427f310ULL;
};

template<class ContainerAllocator>
struct DataType< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ray_trace/ray_traceResponse";
  }

  static const char* value(const ::ray_trace::ray_traceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] intersections\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ray_trace::ray_traceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intersections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ray_traceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ray_trace::ray_traceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ray_trace::ray_traceResponse_<ContainerAllocator>& v)
  {
    s << indent << "intersections[]" << std::endl;
    for (size_t i = 0; i < v.intersections.size(); ++i)
    {
      s << indent << "  intersections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.intersections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAY_TRACE_MESSAGE_RAY_TRACERESPONSE_H
