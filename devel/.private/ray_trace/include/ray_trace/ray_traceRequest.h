// Generated by gencpp from file ray_trace/ray_traceRequest.msg
// DO NOT EDIT!


#ifndef RAY_TRACE_MESSAGE_RAY_TRACEREQUEST_H
#define RAY_TRACE_MESSAGE_RAY_TRACEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ray_trace
{
template <class ContainerAllocator>
struct ray_traceRequest_
{
  typedef ray_traceRequest_<ContainerAllocator> Type;

  ray_traceRequest_()
    : vertices()
    , faces()
    , rays()
    , origins()  {
    }
  ray_traceRequest_(const ContainerAllocator& _alloc)
    : vertices(_alloc)
    , faces(_alloc)
    , rays(_alloc)
    , origins(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _vertices_type;
  _vertices_type vertices;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _faces_type;
  _faces_type faces;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _rays_type;
  _rays_type rays;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _origins_type;
  _origins_type origins;





  typedef boost::shared_ptr< ::ray_trace::ray_traceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ray_trace::ray_traceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ray_traceRequest_

typedef ::ray_trace::ray_traceRequest_<std::allocator<void> > ray_traceRequest;

typedef boost::shared_ptr< ::ray_trace::ray_traceRequest > ray_traceRequestPtr;
typedef boost::shared_ptr< ::ray_trace::ray_traceRequest const> ray_traceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ray_trace::ray_traceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ray_trace::ray_traceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ray_trace::ray_traceRequest_<ContainerAllocator1> & lhs, const ::ray_trace::ray_traceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vertices == rhs.vertices &&
    lhs.faces == rhs.faces &&
    lhs.rays == rhs.rays &&
    lhs.origins == rhs.origins;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ray_trace::ray_traceRequest_<ContainerAllocator1> & lhs, const ::ray_trace::ray_traceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ray_trace

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ray_trace::ray_traceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ray_trace::ray_traceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ray_trace::ray_traceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f38a86bd0beb8c650e2c1d9ff788e3c";
  }

  static const char* value(const ::ray_trace::ray_traceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f38a86bd0beb8c6ULL;
  static const uint64_t static_value2 = 0x50e2c1d9ff788e3cULL;
};

template<class ContainerAllocator>
struct DataType< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ray_trace/ray_traceRequest";
  }

  static const char* value(const ::ray_trace::ray_traceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] vertices\n"
"geometry_msgs/Point[] faces\n"
"geometry_msgs/Point[] rays\n"
"geometry_msgs/Point[] origins\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ray_trace::ray_traceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertices);
      stream.next(m.faces);
      stream.next(m.rays);
      stream.next(m.origins);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ray_traceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ray_trace::ray_traceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ray_trace::ray_traceRequest_<ContainerAllocator>& v)
  {
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "faces[]" << std::endl;
    for (size_t i = 0; i < v.faces.size(); ++i)
    {
      s << indent << "  faces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.faces[i]);
    }
    s << indent << "rays[]" << std::endl;
    for (size_t i = 0; i < v.rays.size(); ++i)
    {
      s << indent << "  rays[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.rays[i]);
    }
    s << indent << "origins[]" << std::endl;
    for (size_t i = 0; i < v.origins.size(); ++i)
    {
      s << indent << "  origins[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.origins[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAY_TRACE_MESSAGE_RAY_TRACEREQUEST_H
